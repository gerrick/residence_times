#!/usr/bin/perl
die "expecting input of form ./exe [lammps trj or dump file] [atom id 1] [atom id 2] [distance cutoff A]" unless ((@ARGV==4) && (-e $ARGV[0]));
$cut=pop @ARGV;$id2=pop @ARGV;$id1=pop @ARGV;$mdcrd=pop @ARGV;
#print STDERR "id 1 is $id1, id2 is $id2, the cutoff is $cut, the traj is $mdcrd\n";
$numref=0;
system "rm -f myoutput-1.*";
#check the head of the lammps traj for the column #'s of the needed data, type and xyz coordinates
@line=`head $mdcrd`;
foreach (0..9){ #this loop determines which columns in the lmp dump are the atom id, atom type, and xyz coordinates
        $line=@line[$_];
        if($line=~/^ITEM: ATOMS/){
                @atm_ary=grep length, split(/\s+/,$line);
                shift @atm_ary;shift @atm_ary;$id_col=0;$type_col=0;$x_col=0;$y_col=0;$z_col=0;$col=0;
                foreach $order(@atm_ary){
                        if($order=~/^id$/){ #print "matcher: $order\n";
                                $id_col=$col;
                        }elsif($order=~/^type$/){ #print "matcher: $order\n";
                                $type_col=$col;
                        }elsif($order=~/^x$/){ #print "matcher: $order\n";
                                $x_col=$col;
                        }elsif($order=~/^y$/){ #print "matcher: $order\n";
                                $y_col=$col;
                        }elsif($order=~/^z$/){ #print "matcher: $order\n";
                                $z_col=$col;
                        }else{
                                #print "no match: $order\n";
                        };
                        $col++;
                };
        }elsif($line=~/^ITEM: BOX BOUNDS pp pp pp/){
                $aoo=@line[$_+1];@atm_ary=grep length, split(/\s+/,$aoo);$aoo=@atm_ary[0];$boo=@atm_ary[1];$x=$boo-$aoo;
                $aoo=@line[$_+2];@atm_ary=grep length, split(/\s+/,$aoo);$aoo=@atm_ary[0];$boo=@atm_ary[1];$y=$boo-$aoo;
                $aoo=@line[$_+3];@atm_ary=grep length, split(/\s+/,$aoo);$aoo=@atm_ary[0];$boo=@atm_ary[1];$z=$boo-$aoo;
                #($_,$x,$y,$z)=split(/\s+/,$limit);
                #print STDERR "the boxlengths are $x $y $z\n";
        }elsif($line=~/^ITEM: NUMBER OF ATOMS/){
                $num=@line[$_+1];
        };
};
#process the lmp dump file
@ARGV=();@ARGV[0]=($mdcrd);$_=<>;
while (<>){
        $_=<>; #print "working on step: $_\n";
        $time++;
        @xyzs=();$id1count=0;$id2count=0;@id1_ids=();@id2_ids=();
        until($_=~/ITEM: ATOMS/){ $_=<>; };
        foreach(1..$num){ #WORK ON THIS SECTION... NEED TO GET THE ATOM INFO INTO THE RIGHT ARRAYS...
                $_=<>;
                @line=grep length, split(/\s+/,$_);
                $id_oo=@line[$id_col];
                if($id1==$line[$type_col]){
                        $id1count++;
                        push @id1_ids,$id_oo;
                }elsif($id2==$line[$type_col]){
                        $id2count++;
                        push @id2_ids,$id_oo;
                };
                $id_oo--;
                @xs[$id_oo]=@line[$x_col];
                @ys[$id_oo]=@line[$y_col];
                @zs[$id_oo]=@line[$z_col];
        };
        #print "@xyzs[-1]\n"; #the last coordinate
        #$count=@xyzs;  #print STDERR "there are $count xyzs and so there are ",$count/$num," per atom\n";
        $count=0;$coordid1=0;$coordid2=0;
        #Have read in the coords, now need to pick out all id1 and id2, then search for pairings
        foreach $aoo(1..$num){
                $count++; $new1=0; $new2=0;
                $id_temp=$count;
                $x_temp=shift @xs;
                $y_temp=shift @ys;
                $z_temp=shift @zs;
                foreach $boo(@id1_ids){ #look if this atom is type 1
                        if($count==$boo){
                                $coordid1++;$new1++;
                                #print STDERR "$count is a #1, and the $coordid1 one at that\n";
                                push @id_1,$id_temp; #store the id
                                push @x_1,$x_temp; #store x
                                push @y_1,$y_temp; #store y
                                push @z_1,$z_temp; #store z
                        };
                };
                foreach $boo(@id2_ids){ #look if this atom is type 2
                        if($count==$boo){
                                $coordid2++;$new2++;die "one atom can't be two things" if ($new1==1);
                                #print STDERR "$count is a #2, and the $coordid2 one at that\n";
                                push @id_2,$id_temp; #store the id
                                push @x_2,$x_temp; #store x
                                push @y_2,$y_temp; #store y
                                push @z_2,$z_temp; #store z
                        };
                };
        };
        #print STDERR "found a total of $coordid1 1's and $coordid2 2's\n";
        #now search through #1's to find all #2 partners
        foreach $aoo(0..($coordid1-1)){
                foreach $boo(0..($coordid2-1)){
                        $dx=$x_1[$aoo]-$x_2[$boo];
                        $dy=$y_1[$aoo]-$y_2[$boo];
                        $dz=$z_1[$aoo]-$z_2[$boo];
                        $d=sqrt($dx*$dx+$dy*$dy+$dz*$dz);
                        #print STDERR "$aoo $boo $id_1[$aoo] $id_2[$boo] ($x_1[$aoo] $y_1[$aoo] $z_1[$aoo]) ($x_2[$boo] $y_2[$boo] $z_2[$boo]) $dx $dy $dz $d "; #note this print is tied to the next one, no \n here
                        if(abs($dx)>($x/2)){ if($dx>0){$dx=$dx-$x;}else{$dx=$dx+$x;} };
                        if(abs($dy)>($y/2)){ if($dy>0){$dy=$dy-$y;}else{$dy=$dy+$y;} };
                        if(abs($dz)>($z/2)){ if($dz>0){$dz=$dz-$z;}else{$dz=$dz+$z;} };
                        $d=sqrt($dx*$dx+$dy*$dy+$dz*$dz);
                        #print STDERR "$dx $dy $dz $d\n"; #Note: this print is tied to the last one
                        if ($d<$cut){ #a pair
                                #print STDERR "@id_1[$aoo] @id_2[$boo] $dx $dy $dz $d\n";
                                #die;
                                $pairs++;
                                push @neighbors,@id_2[$boo];
                        };
                };
                $neighbors=join " ",@neighbors;
                open(OUT,">>myoutput-1.@id_1[$aoo].dat")||die "cannot open myoutput-1.@id_1[$aoo].dat";
                print OUT "$time $pairs $neighbors\n";
                close OUT;
                $pairs=0;@neighbors=();$neighbors=undef;
        };
        @id_1=();@x_1=();@y_1=();@z_1=();
        @id_2=();@x_2=();@y_2=();@z_2=();
        $id1count=0;$id2count=0;
};

